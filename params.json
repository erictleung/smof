{"name":"Smof","tagline":"Simple manipulation of FASTA","body":"smof\r\n====\r\n\r\nUNIX-style FASTA tools\r\n\r\nInstallation\r\n============\r\n\r\n`smof` has been tested in a Linux and Mac OS environment. To install run the following in a terminal window\r\n\r\n``` bash\r\ngit clone https://github.com/zbwrnz/smof\r\ncd smof\r\n./runtest.py\r\n./IO-test.sh\r\nsudo ln -s $PWD/smof.py /usr/local/bin/smof\r\n```\r\n\r\nYou may, of course, link the smof executable to whatever location you want so\r\nlong as the destination directory is in PATH.\r\n\r\nIf you do not have git installed on your machine, you may download the ZIP file\r\nand run\r\n\r\n``` bash\r\nunzip smof-master.zip\r\ncd smof-master\r\n./runtest.py\r\n./IO-test.sh\r\nsudo ln -s $PWD/smof.py /usr/local/bin/smof\r\n```\r\n\r\n\r\nGetting Help\r\n============\r\n\r\nDetailed instructions on how to use each command in `smof` is available via the\r\n'-h' option.\r\n\r\nTo list subcommands\r\n\r\n``` bash\r\nsmof -h\r\n```\r\n\r\nGet help on a specific subcommand\r\n\r\n``` bash\r\nsmof grep -h\r\n```\r\n\r\n\r\nUNIX-like commands\r\n==================\r\n\r\nThis group of subcommands include commands based off UNIX builtins.\r\n\r\n## `smof grep`\r\n\r\nWhereas GNU grep searches lines for matches, `smof grep` searches either the\r\nFASTA headers OR the fasta sequence.\r\n\r\nExtract the entry with the id AT5G49640\r\n\r\n``` bash\r\nsmof grep AT1G10960 at.faa\r\n```\r\n\r\nExtract entries containing the sequence 'FFQQ'\r\n\r\n```bash\r\nsmof grep -q FFQQ at.faa\r\n```\r\n\r\nExtract only the FFQQ motif and the 3 amino acids flanking it.\r\n```bash\r\nsmof grep -qoC3 FFQQ at.faa\r\n```\r\n\r\nWrite the output in gff format\r\n```bash\r\nsmof grep -qoC3 --gff FFQQ at.faa\r\n```\r\n\r\nCount occurrences (on both strands) of a DNA pattern using IUPAC extended\r\nnucleotide alphabet.\r\n```bash\r\nsmof grep -qmbG YYNCTATAWAWASM myfile.fna\r\n   1388\r\n```\r\n\r\nFind non-overlapping open reading frames of length greater than 100 codons.\r\nThis is meant as an example of regex searching. This will NOT give you a great\r\nanswer. smof does not consider frames (nor will it ever). It will not find the\r\nset of longest possible ORFs. If you want to identify ORFs, you should use a\r\nspecialized program. That said:\r\n\r\n``` bash\r\nsmof grep -qPb --gff 'ATG(.{3}){99,}?(TAA|TGA|TAG)' myfile.fna\r\n  chr3    smof-2.0.1   regex_match   357   668   .  +  .  .\r\n  chr3    smof-2.0.1   regex_match   823   1152  .  +  .  .\r\n  chr3    smof-2.0.1   regex_match   1230  1568  .  +  .  .\r\n```\r\n\r\nA particularly powerful function of `smof grep` is the ability to read a whole\r\nfile of patterns and match them against a regex capture. This allows O(n),\r\nrather than O(mn) as in GNU grep, extraction of entries containing a particular\r\npattern. For example if your headers are formatted like\r\n'locus|xxx|taxon|yyy|gi|zzz' and you have a file of thousands of gi numbers,\r\nyou can quickly extract all the sequences in the FASTA file matching one of\r\nthese gi numbers with the following command:\r\n\r\n```bash\r\nsmof grep -w 'gi\\|(\\d+)' -f gi_numbers.txt seq.fa\r\n```\r\n\r\n## `smof md5sum`\r\n\r\nThis tool is useful if you want a checksum for a FASTA file that is independent\r\nof format (e.g. column width or case).\r\n\r\n## `smof head` and `tail`\r\n\r\nThese functions mimic their GNU counterparts but on the entry, rather than\r\nline, level. For example `smof head` prints the first entry in a file and `smof\r\n-5` prints the first 5. Similarly for `smof tail`. \r\n\r\n## `smof sort`\r\n\r\n`smof sort` can be used to simply sort sequences alphabetically by header. It\r\ncan also sort by sequence length. One useful feature with no homolog in GNU\r\nsort is the ability to sort by regex capture. For example, if the FASTA headers\r\nare formated like 'locus|xxx|taxon|yyy|gi|zzz', you can sort them numerically\r\nby taxon with the command `smof sort -nx 'taxon\\|(\\d+)'`.\r\n\r\n## `smof sample`\r\n\r\n`smof sample` allows extraction of a random sample of entries. With no\r\narguments, it reads the entire file into memory and outputs a random one.\r\n\r\n## `smof split`\r\n\r\nThis command allows easily splitting of a large file into many smaller files.\r\n\r\n## `smof uniq`\r\n\r\nThis is currently a pretty useless command.\r\n\r\n## `smof wc`\r\n\r\nOutputs the number of characters and entries in the fasta file.\r\n\r\n\r\nString manipulation commands\r\n============================\r\n\r\n## `smof permute`\r\n\r\nPermutes the letters of a sequence\r\n\r\n## `smof reverse`\r\n\r\nReverses a sequence (does NOT take the reverse complement)\r\n\r\n## `smof subseq`\r\n\r\nFrom sequences with headers matching 'chr3', extract a subsequence from 357 to 668.\r\n\r\n``` bash\r\ncat myfile.fna | smof grep chr3 | smof subseq -b 357 668 \r\n  >chr3\r\n  atggtcctttctcttgtttcttctctgtgttgttgagattagtttgtttaggtttgatagcgttgattttggcctgcgtt\r\n  tggtgactcatatggtttgattggagtttgtttctgggttttatggttttggttgaagcgacatttttttgtggaatatg\r\n  gtttttgcaaaatattttgttccggatgagtaatatctacggtgctgctgtgagaattatgctattgttttgcaggtcct\r\n  gttcttaatctttcatcgcttttgtgcttattgtctccttgtcgtttatgttgagtggtgtttgggctttag\r\n```\r\n\r\nIf the start is higher than the end, and the sequence appears to be a DNA\r\nsequence, then smof will take the reverse complement.\r\n\r\n`smof subseq` can also read from a gff file. However, if you want to extract\r\nmany sequences from a fasta file using a gff file as a guide (or other gff/bed\r\nmanipulations), consider using a specialized tools such as `bedtools`.\r\n\r\n\r\nBiological sequence tools\r\n=========================\r\n\r\n## `smof clean`\r\n\r\nThis command can be used to tidy a sequence. You can change the column width,\r\nremove gaps and stops, convert all letters to one case and/or change irregular\r\ncharacters to unknowns. By default, it removes whitespace in a sequence and\r\nmakes uniform, 80-character columns.\r\n\r\n## `smof filter`\r\n\r\nOutput only sequence that meet a set of conditions.\r\n\r\nIf you want to only keep sequences that are longer than 100 letters\r\n\r\n```bash\r\nsmof filter -l 100 myfile.fa\r\n```\r\n\r\nOr shorter than 100 letters\r\n\r\n```bash\r\nsmof filter -s 100 myfile.fa\r\n```\r\n\r\nOr that have greater than 60% AFILMVW content (hydrophobic amino acids)\r\n\r\n```bash\r\nsmof filter -c 'AFILMVW > .6' myfile.fa\r\n```\r\n\r\n## `smof sniff`\r\n\r\nThis command runs a number of checks on a FASTA file and is useful in\r\ndiagnosing problems. For details, run `smof sniff -h`.\r\n\r\n## `smof stat`\r\n\r\nThe default operation outputs number of sequences and summary statistics\r\nconcerning the sequence lengths.\r\n\r\n```bash\r\nsmof stat arabidopsis.faa\r\n   nseq:      35386\r\n   nchars:    14518241\r\n   5sum:      17 207 350 520 5394\r\n   mean(sd):  410 (305)\r\n   N50:       512\r\n```\r\n\r\n'5sum' refers to the five number summary of the sequence lengths (minimum, 25%\r\nquantile, median, 75% quantile, and maximum).\r\n\r\nStatistics can also be calculated on a sequence-by-sequence level, which by\r\ndefault outputs the sequence names (the first word of the header) and the\r\nsequence length, e.g.\r\n\r\n```bash\r\nsmof stat -q arabidopsis.faa | head -3\r\n   ATCG00500.1   489\r\n   ATCG00510.1   38\r\n   ATCG00280.1   474\r\n```\r\n\r\nThere are many other options. Run `smof stat -h` for descriptions.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}