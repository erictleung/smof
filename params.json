{"name":"Smof","tagline":"Simple manipulation of FASTA","body":"smof\r\n====\r\n\r\nUNIX-style FASTA tools\r\n\r\nInstallation\r\n============\r\n\r\n`smof` has been tested in a Linux and Mac OS environment. To install run the\r\nfollowing in a terminal window\r\n\r\n``` bash\r\ngit clone https://github.com/zbwrnz/smof\r\ncd smof\r\n./runtest.py\r\n./IO-test.sh\r\nsudo ln -s $PWD/smof.py /usr/local/bin/smof\r\n```\r\n\r\nYou may link the smof executable to whatever location you want so long as the\r\ndestination directory is in PATH.\r\n\r\nIf you do not have git installed on your machine, you may download the ZIP file\r\nand run\r\n\r\n``` bash\r\nunzip smof-master.zip\r\ncd smof-master\r\n./runtest.py\r\n./IO-test.sh\r\nsudo ln -s $PWD/smof.py /usr/local/bin/smof\r\n```\r\n\r\n\r\nGetting Help\r\n============\r\n\r\nDetailed instructions on how to use each command in `smof` is available via the\r\n'-h' option.\r\n\r\nTo list subcommands\r\n\r\n``` bash\r\nsmof -h\r\n```\r\n\r\nGet help on a specific subcommand\r\n\r\n``` bash\r\nsmof grep -h\r\n```\r\n\r\n\r\nSample data\r\n===========\r\n\r\nAll the examples below use files in the `sample-data/anncaliia_algerae` folder.\r\n\r\nUNIX-like commands\r\n==================\r\n\r\nThis group of subcommands include commands based off UNIX builtins.\r\n\r\n## `smof head` and `tail`\r\n\r\nThese functions mimic their GNU counterparts but on the entry, rather than\r\nline, level. For example `smof head` prints the first entry in a file and `smof\r\n-5` prints the first 5. Similarly for `smof tail`. \r\n\r\n```bash\r\nsmof head aa.faa\r\nsmof head -3 aa.faa\r\nsmof tail aa.faa\r\nsmof tail -3 aa.faa\r\nsmof tail +2 aa.faa | smof head\r\n```\r\n\r\nIn addition to the GNU-like functionallity, `smof head` and `tail` can also\r\nlimit the sequence that is output. This can be useful for diagnostic purposes.\r\n\r\n```bash\r\n# print just the terminal codon from the first 5 transcripts\r\nsmof head -l 3 -5 aa.transcripts.fna\r\n# print the first codon\r\nsmof head -f 3 -5 aa.transcripts.fna\r\n# print first and last\r\nsmof head -f 3 -l 3 -5 aa.transcripts.fna\r\n```\r\n\r\nThis sort of diagnostics is easier done with `smof sniff`.\r\n\r\n## `smof sort`\r\n\r\n`smof sort` can be used to simply sort sequences alphabetically by header. It\r\ncan also sort by sequence length. One useful feature with no homolog in GNU\r\nsort is the ability to sort by regex capture. For example, if the FASTA headers\r\nare formated like 'locus|xxx|taxon|yyy|gi|zzz', you can sort them numerically\r\nby taxon with the command `smof sort -nx 'taxon\\|(\\d+)'`.\r\n\r\n```bash\r\n# print the shortest sequence\r\nsmof sort -l aa.faa | smof head\r\n# print the longest sequence\r\nsmof sort -l aa.faa | smof tail\r\n# sort by the function in the header description\r\nsmof sort -x 'PRA339 (.*)' aa.faa | smof tail\r\n```\r\n\r\n## `smof sample`\r\n\r\n`smof sample` allows extraction of a random sample of entries. With no\r\narguments, it reads the entire file into memory and outputs a random one.\r\n\r\n```bash\r\n# retrieve 1 sequence by default\r\nsmof sample aa.faa\r\nsmof sample -n 5 aa.faa\r\n# set a random seed (useful for debugging and reproducible scripts)\r\nsmof sample --seed 42 aa.faa\r\n```\r\n\r\n## `smof split`\r\n\r\nThis command allows easily splitting of a large file into many smaller files.\r\n\r\nYou can split a large file several small files with equal numbers of sequences\r\n```bash\r\nsmof split -n 5 -p zzz aa.faa\r\ngrep -c '>' aa.faa zzz*\r\nrm zzz*\r\n```\r\n\r\nOf you can split a large file into many smaller files with a set maximum number\r\nof sequences per file\r\n```bash\r\nsmof split -qn 500 -p zzz aa.faa\r\ngrep -c '>' aa.faa zzz*\r\nrm zzz*\r\n```\r\n\r\n## `smof uniq`\r\n\r\nThis command corresponds roughly to GNU uniq, but entries are considered\r\nidentical only if both header and sequence are exactly the same. As currently\r\nimplemented, I don't find much use for this command.\r\n\r\n## `smof wc`\r\n\r\nOutputs the number of characters and entries in the fasta file. Generally `smof\r\nstat` is better.\r\n\r\n## `smof grep`\r\n\r\nWhereas GNU grep searches lines for matches, `smof grep` searches either the\r\nFASTA headers or the FASTA sequence.\r\n\r\nExtract the entries by matches to the header (default)\r\n\r\n``` bash\r\nsmof grep H312_03353 aa.faa\r\n```\r\n\r\nExtract entries by matches to a sequence \r\n\r\n```bash\r\nsmof grep --match-sequence SKSQ aa.faa\r\n# or equivalently\r\nsmof grep -q SKSQ aa.faa\r\n```\r\n\r\nYou can include flanking regions in the match\r\n```bash\r\n# match 3 residues upstream\r\nsmof grep -qA3 'SKSQ' aa.faa\r\n# match 3 residues downstream \r\nsmof grep -qB3 'SKSQ' aa.faa\r\n# match 3 residues up- and downstream \r\nsmof grep -qC3 'SKSQ' aa.faa\r\n```\r\n\r\nInclusion of flanking regions is particularly useful in tandem with the -o\r\noption, which extracts only the matching sequence\r\n```bash\r\nsmof grep -qoA3 'SKSQ' aa.faa\r\n```\r\n\r\nWrite the output in gff format\r\n```bash\r\nsmof grep -q --gff SKSQ aa.faa\r\n```\r\n\r\nYou can count the number of sequences with a match\r\n```bash\r\nsmof grep -qc SKS aa.faa\r\n```\r\n\r\nOr the total number of matches\r\n```bash\r\nsmof grep -qm SKSQ aa.faa\r\n```\r\n\r\nOr both\r\n```bash\r\nsmof grep -qmc SKS aa.faa\r\n```\r\n\r\nJust like in GNU grep, you can invert a search. This search finds all genes\r\nthat are not annotated as being hypothetical genes.\r\n```bash\r\nsmof grep -v hypothetical aa.faa\r\n```\r\n\r\nBy default `smof grep` is case insensitive (unlike GNU grep), but it can be\r\nmade case sensitive\r\n```bash\r\nsmof grep -I CoA aa.faa\r\n```\r\n\r\nYou can search using patterns in a file\r\n```bash\r\nsmof grep -f id-sample.txt aa.faa\r\n```\r\n\r\nThis, however, can be a little slow, since it searchs each pattern in the file\r\nagainst the entire header. A much faster approach is to extract a search\r\npattern from the headers (or sequence) and then lookup the header pattern in\r\nthe set of search patterns.  ```bash smof grep -f id-sample.txt -w '\\| (\\S+)\r\n\\|' aa.faa ```\r\n\r\nCount occurrences (on both strands) of a DNA pattern using IUPAC extended\r\nnucleotide alphabet.\r\n```bash\r\nsmof grep -qmbG YYNCTATAWAWASM aa.supercontigs.fna\r\n```\r\n\r\nYou can search using a sequence query\r\n```bash\r\n# select 5 random sequences\r\nsmof sample -n 5 aa.faa | smof subseq -b 5 35 > rand.faa\r\nsmof grep -q --fastain rand.faa aa.faa\r\n```\r\n\r\nOr you can search for identical sequences shared between two fasta files\r\n```bash\r\nsmof sample -n 5 aa.faa > rand.faa\r\nsmof grep -q --fastain rand.faa aa.faa \r\n```\r\n\r\nFind non-overlapping open reading frames of length greater than 100 codons.\r\nThis is meant as an example of regex searching. This will NOT give you a great\r\nanswer. smof does not consider frames (nor will it ever). It will not find the\r\nset of longest possible ORFs. If you want to identify ORFs, you should use a\r\nspecialized program. That said:\r\n\r\n``` bash\r\nsmof grep -qPb --gff 'ATG(.{3}){99,}?(TAA|TGA|TAG)' aa.supercontigs.fna\r\n```\r\n\r\n## `smof md5sum`\r\n\r\nThis tool is useful if you want a checksum for a FASTA file that is independent\r\nof format (e.g. column width or case).\r\n\r\n\r\nString manipulation commands\r\n============================\r\n\r\n## `smof permute`\r\n\r\nPermutes the letters of a sequence\r\n\r\n## `smof reverse`\r\n\r\nReverses a sequence (does NOT take the reverse complement)\r\n\r\n## `smof subseq`\r\n\r\n``` bash\r\n# extract a subsequence\r\nsmof grep H312_00003T0 aa.faa | smof subseq -b 10 20\r\n# color the subsequences instead\r\nsmof grep H312_00003T0 aa.faa | smof subseq -b 10 20 -c red\r\n```\r\n\r\nIf the start is higher than the end, and the sequence appears to be a DNA\r\nsequence, then smof will take the reverse complement.\r\n\r\n`smof subseq` can also read from a gff file. However, if you want to extract\r\nmany sequences from a fasta file using a gff file as a guide (or other gff/bed\r\nmanipulations), consider using a specialized tools such as `bedtools`.\r\n\r\n\r\nBiological sequence tools\r\n=========================\r\n\r\n## `smof clean`\r\n\r\nThis command can be used to tidy a sequence. You can change the column width,\r\nremove gaps and stops, convert all letters to one case and/or change irregular\r\ncharacters to unknowns. By default, it removes whitespace in a sequence and\r\nmakes uniform, 80-character columns.\r\n\r\n## `smof filter`\r\n\r\nOutput only sequence that meet a set of conditions.\r\n\r\nIf you want to only keep sequences that are longer than 100 letters\r\n\r\n```bash\r\nsmof clean -x aa.faa | smof filter -l 100\r\n```\r\n\r\nNote that I call clean before filtering to remove the stop character, which\r\nshould not be included when calculating length.\r\n\r\nOr shorter than 100 letters\r\n\r\n```bash\r\nsmof clean -x aa.faa | smof filter -s 100 aa.faa\r\n```\r\n\r\nOr that have greater than 60% AFILMVW content (hydrophobic amino acids)\r\n\r\n```bash\r\nsmof clean -x aa.faa | smof filter -c 'AFILMVW > .5' aa.faa\r\n```\r\n\r\n## `smof sniff`\r\n\r\nThis command runs a number of checks on a FASTA file and is useful in\r\ndiagnosing problems. For details, run `smof sniff -h`.\r\n\r\n## `smof stat`\r\n\r\nThe default operation outputs number of sequences and summary statistics\r\nconcerning the sequence lengths.\r\n\r\n```bash\r\nsmof stat aa.supercontigs.fna\r\n nseq:      431\r\n nchars:    12163397\r\n 5sum:      445 3301 9555 30563 746881\r\n mean(sd):  28221 (58445)\r\n N50:       71704\r\n```\r\n\r\n'5sum' refers to the five number summary of the sequence lengths (minimum, 25%\r\nquantile, median, 75% quantile, and maximum).\r\n\r\nStatistics can also be calculated on a sequence-by-sequence level, which by\r\ndefault outputs the sequence names (the first word of the header) and the\r\nsequence length, e.g.\r\n\r\n```bash\r\nsmof stat -q aa.supercontigs.fna | head\r\n```\r\n\r\nThere are many other options. Run `smof stat -h` for descriptions.\r\n\r\n\r\nCase study 1: exploration and motif extraction\r\n==============================================\r\n\r\nAlice is interested in the chloroplast *maturase* gene. Bob gives her a sample\r\ndataset which includes 10 fasta files of proteins encoded by the chloroplast\r\ngenomes of 10 different plant species. These files are available in the\r\n`sample-data/case-study-1` directory.\r\n\r\nYou can find this dataset in the folder *doc/test-data/chloroplast-proteins*.\r\n\r\nHer first step is to explore the data. She first counts the sequences in each\r\nfile with a simple grep command.\r\n\r\n```\r\ngrep -c '>' *faa\r\n```\r\n\r\nNext she tests the sequences with `smof sniff`\r\n\r\n```\r\nsmof sniff *faa\r\n```\r\n\r\nProducing the following output:\r\n\r\n```\r\n578 uniq sequences (757 total)\r\nAll prot\r\nAll uppercase\r\nProtein Features:\r\n  initial-Met:         755        99.7358%\r\n  terminal-stop:       0          0.0000%\r\n  internal-stop:       0          0.0000%\r\n  selenocysteine:      0          0.0000%\r\nUniversal Features:\r\n  unknown:             8          1.0568%\r\n  ambiguous:           0          0.0000%\r\n  gapped:              0          0.0000%\r\n```\r\n\r\nEverything looks pretty good. But two of the sequences don't start with a\r\nmethionine. Alice wants to find them. She does this using `smof grep` and a\r\nPerl regular expressions.\r\n\r\n```\r\nsmof grep -qP '^[^M]' *faa\r\n```\r\n\r\nShe finds these genes are both from *Solanum lycopersicum* and are described in\r\nthe fasta headers as being *partial*.\r\n\r\nNow Alice wants to find the *maturase* genes by pulling out every entry with\r\n'maturase' in the fasta header.\r\n\r\n```\r\nsmof grep maturase *faa\r\nsmof grep maturase *faa > maturase.faa\r\n```\r\n\r\nFor a close look at the distribution of sequence lengths, Alice calls `smof\r\nstat`\r\n\r\n```\r\nsmof stat maturase.faa\r\n```\r\n\r\nAlice happens to be interested in the sequence WTQPQR from *Panicum virgatum*\r\nand would like to know what the homologous regions are in the other species.\r\n\r\nSo Alice aligns the maturase genes with\r\n[http://nar.oxfordjournals.org/content/32/5/1792.short](MUSCLE) and searches\r\nfor the motif using the GFF output option.\r\n\r\n```\r\nmuscle -quiet < maturase.faa | tee maturase.aln | smof grep -q --gff WTQPQR\r\n```\r\n\r\nThis is outputs the location of the match in standard GFF format, i.e. the\r\nmatch is at position 329 to 334. Homologs to this sequence will be at the same\r\npositions in the aligned fasta file output by MUSCLE.\r\n\r\n```\r\nsmof subseq -b 329 334 maturase.aln\r\n```\r\n\r\nHMMER could then be used to analyze the by-site conservation of the sextuplet.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}